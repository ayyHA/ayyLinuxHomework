git：

1. 创建版本库

1-1. 创建一个空目录

1-2. 在空目录下键入git init即可把此仓库变成git可管理的仓库

注：在空的仓库下，可通过ls -a 命令查看目录中的隐藏文件夹.git(版本库)
    .git >
	 |   refs(文件夹) 
         |   HEAD(文件)
         |   index(文件)
         |   . . . . . .

   index（或stage）即为暂存区
   refs里的heads目录下即为空仓库自带分支master
   HEAD为指向master分支的指针
   除了git init此条指令是在非git仓库下执行外，其余git指令均要在git仓库的目录或子目录下执行

2. 添加文件至版本库

2-1. 通过指令：git add 文件名 
  即可将文件添加到暂存区里
  此指令可一次性添加多个文件，以空格[ ]分隔之

2-2. 通过指令：git commit -m "此处为注释"
  即可将文件从暂存区提交到当前分支（master）
  此指令一次可提交多个文件，注释可写可不写，但为了日后自己阅读方便，建议写上


3. 本地仓库的基本操作

3-1. 文件状态和修改情况的查看指令

3-1-1. 通过指令：git status
  可以查看工作区的状态，可以查看文件是否被修改，有无被提交到暂存区等等
  
3-1-2. 通过指令：git diff 文件名
  可以查看文件具体修改了哪些内容

3-2. 版本回退和前进
  
3-2-1. 通过指令：git log
  可以查看最近到最远的提交日志
  如果想指令输出得更为精简，可通过指令：git log --pretty=oneline
  来进行输出，则只会显示版本号（commit id）和文件修改信息（即注释）

  通过版本号，我们可以进行版本的回退（也可以进行前进）
  而版本的回退需要借助一个指令：git reset --hard HEAD^
  注：此命令只是回退到上一个版本
      在git中，用HEAD表示当前版本，用HEAD^表示上一个版本，而上上个版本则为HEAD^^，以此类推，但也有另一种写法即HEAD~n，n代表往上回n个版本

  也可以通过版本号，随意跳动，如：git reset --hard 10888ay
  
  不过回退后再通过git log 指令来查看日记情况，只会从现在的版本号显示到最远的版本号，想要查看曾经晚于现在的版本号，可通过指令：git reflog 来查看我们的版本号
  已知了版本号，即可回到将来


3-3. 管理修改
  Git这个版本控制系统出色于其跟踪管理的是“修改”而非“文件”
  Git在向分支master commit文件时，是从暂存区index里将文件进行提交，若是文件修改了但没有提交到暂存区，即使commit了，也不会将新文件提交到分支上，因为它没有add进暂存区
  
  通过指令：git diff HEAD -- 文件名 
  可以查看工作区（即被git管理的那一整个文件夹）和版本库里面最新版本的区别

3-4. 撤销修改

3-4-1. 修改了文件，但尚未添加到暂存区
  可直接进入文件进行修改
  也可通过指令：git checkout -- 文件名
  来丢弃工作区的修改，变成与版本库一样的状态（若是加入了暂存区，则撤销修改后的版本会与暂存区的一致）

3-4-2. 修改了文件，已加入暂存区，但未提交
  可通过指令：git reset HEAD 文件名
  来将其由暂存区撤回到工作区
  
  再通过指令：git checkout -- 文件名
  来将修改后的内容撤销
  
3-5. 删除文件
  在git中，将文件提交到版本库里，然后将文件给删除了，通过git status可知其处于删除状态
  此时，可以选择从版本库删除之，则通过指令：git rm 文件名 删除之，并提交给当前分支
  亦可选择从版本库恢复之，则通过指令：git checkout -- 文件名 将其从版本库中恢复

4. 远程仓库
  在Git中，可以通过Github进行代码托管，获得Git的远程仓库
  Git 支持 SSH 、 https 等协议
  
4-1. 从远程库克隆
  I、在github上创建一个仓库，自动initialize一个文件
 II、通过指令：git clone git@github.com:username/repository.git 进行克隆
III、在本地仓库将会产生一个repository的文件夹，而其下的内容则是在远程仓库下的内容

4-2. 添加远程库  
  I、在Github上自己的账号里将自己电脑的SSH key的公钥保存，以便于Github识别推送者是否可信
 II、通过指令：git remote add origin git@github.com:username/repository.git 关联远程库
III、通过指令：git push -u origin master 推送本地库内容上远程库
  注：加上了-u参数，不但是可以将本地的master分支推到远程库的master分支上，还可以把本地master分支和远程库的master分支相关联
  之后提交，只需写：git push origin master 即可

5. 分支管理
  每一次的提交（commit）,git会将它们串成一条时间线
  master,这是个主分支，HEAD指向master,master指向最新的提交
  HEAD指向的是当前分支

  每次提交，master分支都会向前移动，以指向最新的提交
  
5-1. 创建和合并分支
  通过指令：git checkout -b dev（此处名字可自定义，例子用dev） 创建dev分支并且切换到dev分支
这个命令等价于
<======>
  git branch dev  	//创建dev分支
  git checkout dev	//切换dev分支

  通过指令：git branch 可以查看分支情况，带*号的是当前分支
  如果切换了分支，则提交是在当前分支上进行的提交

  通过指令：git merge dev 来合并指定分支到当前分支

  通过指令：git branch -d dev 可以删除合并好了的分支

注：切换分支可通过指令：git switch 分支名 更好
    创建并切换分支可通过：git switch -c 分支名

5-2. 分支冲突
  当多个分支对同一个文件进行了修改，且形式各异，在合并的时候就会产生“冲突”，而这些个冲突，需要我们手动处理，处理好之后再合并即可

5-3. 管理策略
  正常情况下git采用fast forward 模式合并，即只改变指针指向，并不开辟新的内存空间，在删除分之后，会丢掉分支信息
  可在合并的时候加上 --no-ff，则可原样开辟一块空间并存放内容，在合并时可为其加注释（因其作了新的一次提交），从分支历史上可以看出分支信息
  
