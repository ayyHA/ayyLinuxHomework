文件所完成的是：|快速检索（定位）
		|分散存储（充分利用存储空间)

ALU<=>Cache(line)<=>MainMemory(Page)<=>Hardware(Block)
     (行号->页号)   (页号->块号)
       行内地址  ->   页内地址      ->     块内地址


		   index节点
基本目录项 ->   |     属性
		|    地址表

找文件路径即找inode号


文件在计算机存储的方式|连续文件 Data占用连续块（数组）
		      |链接文件 使用不连续块，块间通过相互记录对方的指针(块号)联系
		      |索引文件 索引表(连续存放) + 数据块(不连续存放)


Process = code + resource(t)
			关于时间的函数(引起进程状态的改变)

进程在运行前后都需要进行环境改变
		-----	|保存被中断的断点|
	 	|	|      初始化    |(构造)  -----
		|	|       Main     |	      |
		|	| 保存自己的断点 |(析构)  -----
		-----	|     恢复对方   |


命令行参数
   main(int argc,char* argv[],char* env[])
			     运行的环境变量
	

字符串转整型：int atoi(const char*); 	(array to int)
整型转字符串：char* itoa(int value,char* string,int radix); (注：此处的radix是基数，是转换后的进制数)

C语言的构造函数：
static void __attribute__((constructor)) 函数名(){函数体}
C语言的析构函数：
static void __attribute__((destructor)) 函数名(){函数体}

这里的构造函数或是析构函数都是通过__attribute__机制来实现的。
这个__attribute__机制是GNU C的特色
在里面可以设置“函数属性”、“变量属性”、“类型属性”

exit(0)函数：会清空缓存区,输出缓冲区内容,再退出
_exit(0)函数：会强制清空,不会输出缓冲区内容


回调函数
static void 函数名(void){函数体}	//定义一个函数
atexit(函数名)				//将函数注册为回调函数
atexit()函数：用于注册main函数的回调函数,以栈的形式存放这些回调函数
注：回调函数先于析构函数调用，而且其只有在正常退出才会被调用(return 0 / exit(0) )



